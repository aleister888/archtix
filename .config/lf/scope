#!/bin/sh

# Visualizador de archivos para LF.

# Crear el directorio para la caché
[ -d "${XDG_CACHE_HOME:-$HOME/.cache}/lf" ] || mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}/lf"

set -C -f
IFS="$(printf '%b_' '\n')"
IFS="${IFS%_}"

# Función para mostrar imágenes con ueberzug
image() {
	X=$4
	Y=$5
	MW=$(($2 - 1))
	MH=$(($3 - 1)) # Variables de posición y geometría

	if [ -f "$1" ] && [ -n "$DISPLAY" ] && command -V ueberzug >/dev/null 2>&1; then
		printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' \
			"$X" "$Y" "$MW" "$MH" "$1" >"$FIFO_UEBERZUG"
	else
		mediainfo "$6"
	fi
}

# Función para extraer el hash de un archivo
file_hash() {
	stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}'
}

# Función para la preview de archivos que se pueden convertir con imagemagick directamente
convert_and_preview() {
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
	[ ! -f "$CACHE.jpg" ] && convert "$1" "$CACHE.jpg"
	image "$CACHE.jpg" "$2" "$3" "$4" "$5"
	exit 1
}

# Notesé que la caché se genera en función de la información del archivo,
# un mismo archivo que esta en múltiples directorios solo generará un archivo en cache.

# Crear preview en función del tipo de archivo
case "$(xdg-mime query filetype "$1")" in

# Imprimir los manuales con man
text/troff) man ./ "$1" | col -b ;;

# Imprimir los archivos de texto con bat
text/* | */xml | */json | */x-shellscript | */x-xcursor | */x-theme | */x-desktop | */x-troff-man | */x-ruby | */yaml | */toml | */sql)
	# Comprobar si es un archivo de texto
	case "$(file --dereference --brief --mime-type -- "$1")" in
	# Si es una clave gpg, mostar su información con gpg
	application/pgp-keys) gpg --list-packets "$1" ;;
	# Si es un archivo de texto mostrarlo con bat
	*/*) bat -fp --terminal-width "$(($4 - 2))" -f "$1" ;;
	esac
	;;

# Convertir los proyectos de GIMP a JPG
image/x-xcf) convert_and_preview "$1" ;;
# Convertir imágenes postscript a JPG
*/postscript) convert_and_preview "$1" ;;
# Convertir las imágenes AVIF a JPG
image/avif) convert_and_preview "$1" ;;

# Convertir las imágenes vectoriales (.svg) a .png
image/svg+xml)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
	[ ! -f "$CACHE.png" ] && inkscape --convert-dpi-method=none -o "$CACHE.png" --export-overwrite -D --export-png-color-mode=RGBA_16 "$1"
	image "$CACHE.png" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Convertir los gráficos .eps a .jpg
image/x-eps)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
	[ ! -f "$CACHE" ] && gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=jpeg -r300 -dEPSCrop -sOutputFile="$CACHE.jpg" "$1" >/dev/null 2>&1
	image "$CACHE.jpg" "$2" "$3" "$4" "$5"
	exit 1
	;;

# El resto de imágenes mostarlas tal cual con ueberzug
image/*)
	image "$1" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Mostrar la carátula y metadatos de los archivos de audio
audio/flac | audio/mpeg | audio/x-m4a | audio/mp4)
	HASH="$(file_hash "$1")"
	CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH"
	METADATA="$CACHE_DIR/metadata.txt"
	COVER="$CACHE_DIR/cover.jpg"
	[ ! -d "$CACHE_DIR" ] && mkdir -p "$CACHE_DIR"
	[ ! -f "$METADATA" ] && ffmpeg -i "$1" -y -f ffmetadata "$METADATA"
	[ ! -f "$COVER" ] && ffmpeg -nostdin -i "$1" "$COVER"

	{
		printf '\n%.0s' $(seq $(($4 / 5)))
		printf '\n'
		grep -ivwE "(comment|encoder|ffmetadata1)" "$METADATA"
	}
	image "$COVER" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Mostar información sobre los discos/imágenes de instalación
*/x-iso9660-image | */vnd.efi.iso) isoinfo -d -i "$1" || exit 1 ;;

# Mostrar una pre-visualización e información sobre el video
video/*)
	HASH="$(file_hash "$1")"
	CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH"
	THUMB="$CACHE_DIR/thumb.jpg"
	METADATA="$CACHE_DIR/metadata.txt"
	[ ! -d "$CACHE_DIR" ] && mkdir -p "$CACHE_DIR"
	[ ! -f "$THUMB" ] && ffmpegthumbnailer -i "$1" -o "$THUMB" -s 0
	if [ ! -f "$METADATA" ]; then
		TMP="$(mktemp /tmp/lf.XXXX)"
		mediainfo "$1" | tr '\t' ' ' | tr -s " " >"$TMP"
		# Extraemos la información necesaria
		grep "File size" "$TMP" | head -n1 |
			tee "$METADATA"
		grep "Duration" "$TMP" | head -n1 |
			tee -a "$METADATA"
		grep "FPS" "$TMP" | head -n1 |
			tee -a "$METADATA"
		grep "Movie name" "$TMP" | head -n1 |
			tee -a "$METADATA"
		rm "$TMP"
	fi

	{
		printf '\n%.0s' $(seq $(($4 / 5)))
		printf '\n'
		cat "$METADATA"
	}
	image "$THUMB" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Convertir la primera página a .jpg
*/pdf)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
	[ ! -f "$CACHE.jpg" ] && pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"
	image "$CACHE.jpg" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Mostar la primera página de comics en formato .cbz/.cbr
*/vnd.comicbook+zip | */vnd.comicbook-rar)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
	if [ ! -f "$CACHE" ]; then
		TMP_DIR="$(mktemp -d /tmp/lf.XXXX)"
		# Obtener y extraer la 1ª imagen
		FIRST_IMAGE=$(7z l "$1" | awk '/\.jpg$|\.png$/ { for(i=6;i<=NF;i++) printf "%s%s", $i, (i==NF ? "\n" : " ") }' | sort | head -n1)
		if [ -n "$FIRST_IMAGE" ]; then
			7z e "$1" "$FIRST_IMAGE" -o"$TMP_DIR" >/dev/null 2>&1
			mv "$TMP_DIR/$(basename "$FIRST_IMAGE")" "$CACHE"
		else
			exit 1
		fi
		rm -rf "$TMP_DIR"
	fi
	image "$CACHE" "$2" "$3" "$4" "$5"
	exit 1
	;;

# Mostar un listado de los archivos comprimidos
*/x-tar | */x-compressed-tar)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH.txt"
	[ ! -f "$CACHE" ] && tar -tf "$1" | tail -n +1 | tee "$CACHE"
	cat "$CACHE"
	exit 1
	;;

# Mostar un listado de los archivos comprimidos
*/vnd.rar)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH.txt"
	if [ ! -f "$CACHE" ]; then
		unrar l "$1" | tail -n +9 | head -n -3 |
			awk '{ for(i=4; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : " ") }' |
			tee "$CACHE"
	fi
	cat "$CACHE"
	exit 1
	;;

# Mostar un listado de los archivos comprimidos
*/zip)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH.txt"
	if [ ! -f "$CACHE" ]; then
		unzip -l "$1" | tail -n +4 | head -n -2 |
			awk '{ for(i=3; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : " ") }' |
			tee "$CACHE"
	fi
	cat "$CACHE"
	exit 1
	;;

# Mostar un listado de los archivos comprimidos
*/x-7z-compressed)
	HASH="$(file_hash "$1")"
	CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/$HASH.txt"
	if [ ! -f "$CACHE" ]; then
		7z l "$1" | tail -n +21 | head -n -2 |
			awk '{ for(i=6; i<=NF; i++) printf "%s%s", $i, (i==NF ? "\n" : " ") }' |
			tee "$CACHE"
	fi
	cat "$CACHE"
	exit 1
	;;

# Convertir documentos a texto
*opendocument*) odt2txt "$1" | fold -w $(($(($4 - 2)) / 5 + 2)) ;;

# Mostar información sobre las claves con pgp
*/pgp-encrypted) gpg --list-packets "$1" ;;

# Si no es ninguno de estos tipos, usar medianfo
*) mediainfo "$1" | tr -s " " || exit 1 ;;

esac
