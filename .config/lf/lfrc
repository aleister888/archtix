#  _  __                    __ _
# | |/ _|   ___ ___  _ __  / _(_) __ _
# | | |_   / __/ _ \| '_ \| |_| |/ _` |
# | |  _| | (_| (_) | | | |  _| | (_| |
# |_|_|    \___\___/|_| |_|_| |_|\__, |
#                                |___/

# Opciones
set shell bash
set shellopts '-eu'
set ifs "\n"
set filesep "\n"
set scrolloff 10
set icons
set period 1
set relativenumber
set info size:time
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set ratios 3:5:4
set hiddenfiles ".*:*.aux:*.toc:*.sty:*.out:*.log:*.bbl:*.blg:*.synctex.gz:*.bcf:*.nav:*.run.xml:*.snm:*.xwm"

# Muestra información sobre el directorio actual
cmd on-cd &{{
	clear
	# Mostrar el directorio en el nombre de la ventana
	printf '\033]0;%s\007' "$(pwd | sed "s|^$HOME|~|")" > /dev/tty
	# Mostrar información sobre los repositorios
	if [ -d .git ] || [ -f .git ]; then
		branch="$(git branch --show-current 2>/dev/null)" || true
		remote="$(git config --get "branch.$branch.remote" 2>/dev/null)" || true
		url="$(git remote get-url "$remote" 2>/dev/null)" || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [$branch >> $url]\033[0m"
	else
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
	fi
	lf -remote "send $id set promptfmt \"$fmt\""
}}

on-cd

# Limpiar pantalla
map R $clear
# Recargar configuración
map C &lf -remote "send $id source ~/.config/lf/lfrc"

# Pegar archivos
map p paste

# Renombrar archivos
map r rename
map <c-r> bulk-rename

# Gestionar papelera
map S trash
map D clean-trash
map F restore-trash

# Abrir scratchpad en el directorio actual
map s cdterm

# Cambiar de directorio
map <esc> home
map z home
map t cd /tmp
map T cd /run/media

# Buscar archivo
map / :fzf_search
map <c-_> :fzf_grep

# Extraer/comprimir archivos
map E extract
map <c-e> :compress; cd /tmp

# Abrir archivos
cmd open-with %export ; "$@" "$fx"
map <enter> push :open-with<space>
map o &mimeopen "$f"
map O $mimeopen --ask $f

# Mostrar/ocultar los archivos ocultos
map h set hidden!

# Abrir/crear archivo con vim
map V push :!nvim<space>$f

# Permitir arrastrar archivos hacia otra ventana
map <c-z> $setsid -f dragon-drop -a -x $fx

# Notificar del tamaño de los ítemes actuales
map P size

# Crear directorio
map m push %mkdir<space>

# Copiar el directorio del archivo actual al portapapeles
map Y ${{
	printf '"%s"' "$(dirname "$fx")" | xclip -selection clipboard
	notify-send -i gpaste "Ruta copiada al portapapeles"
}}

# Salir del programa
map q ${{
	# Restaurar el título original de la ventana
	printf '\033]0;\007'
	/usr/bin/lf -remote "send $id quit"
}}

# Muestra información del archivo seleccionado con eza
cmd on-select &{{
	clear
	lf -remote "send $id set statfmt \"$(eza -ldHF --color=always --time-style iso "$(basename "$f")" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

# Comprimir archivos dentro de un directorio en el formato seleccionado
cmd compress ${{
	if whiptail --title "$(echo $PWD)" \
	--yesno "Comprimir:\n  Archivos de => $PWD\n  En el archivo => /tmp/$(basename $(echo $PWD)).*" 10 60; then
		formato=$(whiptail --title "Formato" --menu "¿En que formato desea comprimirlos?" \
		15 60 3 "tar" ".tar.gz" "zip" ".zip" "7z" ".7z" 3>&1 1>&2 2>&3)
		case "$formato" in
		tar)
			tar -zcvf "/tmp/$(basename $(echo $PWD)).tar.gz" . && \
			whiptail --title "Operación Completada" \
			--msgbox "Archivo comprimido en: /tmp/$(basename $(echo $PWD)).tar.gz" 10 60 ;;
		zip)
			zip -r "/tmp/$(basename $(echo $PWD)).zip" . && \
			whiptail --title "Operación Completada" \
			--msgbox "Archivo comprimido en: /tmp/$(basename $(echo $PWD)).zip" 10 60 ;;
		7z)
			7z a "/tmp/$(basename $(echo $PWD)).7z" . && \
			whiptail --title "Operación Completada" \
			--msgbox "Archivo comprimido en: /tmp/$(basename $(echo $PWD)).7z" 10 60 ;;
		esac
	fi
	clear
}}

# Función para abrir un scratchpad en el directorio actual
cmd cdterm &{{
	cd "$(dirname $f)"; setsid -f $TERMINAL $TERMTITLE scratchpad
}}

# Enviar una notificación con el tamaño del ítem seleccionado
cmd size &{{
	dunstctl close-all
	notify-send -i system-file-manager \
	"El tamaño es de $(/usr/bin/du -chs $fx | grep total | awk {'print $1'})"
}}

cmd home :cd ~/

# Renombrar el contenido de un directorio con nvim
cmd bulk-rename ${{
	old="$(mktemp)"
	new="$(mktemp)"
	if [ -n "$fs" ]; then
		fs="$(basename $fs)"
	else
		fs="$(ls)"
	fi
	printf '%s\n' "$fs" >"$old"
	printf '%s\n' "$fs" >"$new"
	$EDITOR "$new"
	[ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
	paste "$old" "$new" | while IFS= read -r names; do
		src="$(printf '%s' "$names" | cut -f1)"
		dst="$(printf '%s' "$names" | cut -f2)"
		if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
			continue
		fi
		mv -- "$src" "$dst"
	done
	rm -- "$old" "$new"
	/usr/bin/lf -remote "send $id unselect"
}}

# Buscar con fzf cadenas entre los archivos
cmd fzf_grep ${{
	cmd="rg --column --line-number --no-heading --color=always --smart-case"
	fzf --ansi --disabled --layout=reverse --delimiter=: \
		--bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
		--bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
		--bind='enter:become(lf -remote "send $id select \"$(printf "%s" {1} | sed '\''s/\\/\\\\/g;s/"/\\"/g'\'')\"")' \
		--preview='bat --color=always --highlight-line={2} -- {1}'
}}

# Elegir archivo con fzf
cmd fzf_search ${{
	res="$(find . | fzf --reverse --header='Ir a la localización')"
	if [ -n "$res" ]; then
		if [ -d "$res" ]; then
			cmd="cd"
		else
			cmd="select"
		fi
		res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
		/usr/bin/lf -remote "send $id $cmd \"$res\""
	fi
	clear
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Extraer archive
cmd extract ${{
	whiptail --title "¿Extraer archivo(s)?" \
	--yesno "¿Quieres extraer el archivo $f?" 10 60 && \
	{
		case "$(xdg-mime query filetype "$f")" in
		*/x-zstd-compressed-tar)
			unzstd "$f"
			aunpack "$(basename -s .zst "$f")"
			rm "$(basename -s .zst "$f")"
			;;
		*) aunpack $f ;;
		esac
	} && \
	whiptail --title "Operación Completada" \
	--msgbox "Los archivos se extrajeron correctamente" 10 60
}}

# Pegar archivos copiados/cortados
cmd paste &{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	case "$mode" in
		copy)
			rsync -av --ignore-existing --progress -- "$@" . |
			stdbuf -i0 -o0 -e0 tr '\r' '\n' |
			while IFS= read -r line; do
				/usr/bin/lf -remote "send $id echo $line"
			done && notify-send -i copyq "Archivo(s) copiados." >/dev/null
			;;
		move) mv -n -- "$@" . && notify-send -i copyq "Archivo(s) movidos."
		;;
	esac
	rm ~/.local/share/lf/files
	/usr/bin/lf -remote "send clear"
}}

# Mover a la papelera
cmd trash ${{
	clear; tput bold
	set -f
	printf "%s\n\n" "$fx"
	printf "¿Mover archivo(s) a la papelera? [s/N] "
	read ans
	[ $ans = "s" ] && trash-put $fx &&
	notify-send -i \
	/usr/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
	"Archivo(s) movido(s) a la papelera"
	clear
}}

# Vaciar la papelera
cmd clean-trash ${{
	clear; tput bold
	set -f
	printf "Contenidos de la papelera:\n"
	trash-list
	printf "¿Vaciar papelera? [s/N] "
	read ans
	[ $ans = "s" ] && trash-empty -f && \
	notify-send -i \
	/usr/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
	"Archivo(s) borrados"
	clear
}}

# Restaurar archivos de la papelera
cmd restore-trash ${{
	clear; tput bold
	set -f
	printf "Contenidos de la papelera:\n"
	trash-list | sed "s|$HOME|~|"
	printf "¿Restaurar papelera? [s/N] "
	read ans
	if [ $ans = "s" ]; then
		clear
		trash-restore
	fi && printf "Hecho!"
	clear
}}

# Abrir archivos en función del tipo
cmd open ${{

case $(xdg-mime query filetype "$(readlink -f $f)") in

	*/x-7z-compressed | */vnd.rar | */*-tar | */zip | */gzip)
		setsid -f xarchiver "$fx" >/dev/null 2>&1 ;;

	*/vnd.*document*)
		setsid -f libreoffice "$fx" >/dev/null 2>&1 ;;

	*/pdf | */epub* | */vnd.comicbook*)
		setsid -f zathura "$f" >/dev/null 2>&1 ;;

	text/* | */xml | */json | inode/x-empty | */x-shellscript | */pgp-encrypted | */x-xcursor | */x-theme | */x-desktop | */yaml | application/sql )
		$EDITOR "$fx" ;;

	image/x-eps)
		HASH="$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$f")" | sha256sum | awk '{print $1}')"
		CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$HASH"
		[ ! -f "$CACHE" ] && gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=jpeg -r300 -dEPSCrop -sOutputFile="$CACHE.jpg" "$f" >/dev/null 2>&1
		setsid -f nsxiv "$CACHE.jpg" >/dev/null 2>&1 &
		;;

	image/*)
		filelist=$(/usr/bin/ls -1 . | grep -E '.+\.(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF|bmp|BMP|tiff|TIFF|ppm|PPM|svg|SVG|webp|WEBP|xpm|XPM)')
		index=$(printf "%s\n" $filelist | nl | grep "$(basename "$fx")" | awk '{print $1}')
		setsid -f nsxiv -n $index $filelist >/dev/null 2>&1 ;;

	audio/*)
		/usr/bin/mpv --audio-display=no "$f" ;;

	video/*)
		/usr/bin/mpv "$f" >/dev/null 2>&1 ;;

	*/x-keepass2)
		setsid -f keepassxc "$f" >/dev/null 2>&1 ;;

	*/x-reaper-*)
		setsid -f reaper "$f" >/dev/null 2>&1 ;;

	*/x-tuxguitar | application/gpx+xml | application/x-gnuplot | application/x-gtp)
		setsid -f tuxguitar-bin "$fx" >/dev/null 2>&1 ;;

	*)
		for f in $fx; do $OPENER "$f" 2>&1 && clear; done ;;
esac
}}
