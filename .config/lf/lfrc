#       _      _     _              _  __                    __ _
#  __ _| | ___(_)___| |_ ___ _ __  | |/ _|   ___ ___  _ __  / _(_) __ _
# / _` | |/ _ \ / __| __/ _ \ '__| | | |_   / __/ _ \| '_ \| |_| |/ _` |
#| (_| | |  __/ \__ \ ||  __/ |    | |  _| | (_| (_) | | | |  _| | (_| |
# \__,_|_|\___|_|___/\__\___|_|    |_|_|    \___\___/|_| |_|_| |_|\__, |
#                                                                 |___/

# Si se usa un adminstrador de ventanas, perl-file-mimeinfo
# debe estar instalado y la variable XDG_CURRENT_DESKTOP debe
# estar establecida como XDG_CURRENT_DESKTOP=X-Generic para que
# xdg-utils funcione de forma correcta

set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"
set scrolloff 10
set icons
set period 1

set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

set info size:time
# Relación entre columnas
set ratios 1:1:1
# Definir Archivos Ocultos
set hiddenfiles ".*:*.aux:*.toc:*timeshift:*.reapeaks"

# Renombrar/Copiar/Mover Archivos
map p paste
map r rename
map <c-r> bulk-rename
# Buscar Archivos
map / :fzf_jump
map <c-_> :fzf_search
# Borrar Archivos
map S delete
map D trash
map <c-d> clean-trash
map <a-d> restore-trash
# volver a $HOME
map Z home
# Extraer y comprimir Archivos
map E extract
map <c-e> compress
# Limpiar pantalla
map R :reload; clean
# Abrir Archivos
cmd open-with %export ; "$@" "$fx"
map <enter> push :open-with<space>
map o &mimeopen "$f"
map O $mimeopen --ask $f
# Mostrar/Ocultar Archivos Ocultos
map h set hidden!
# Editar Archivo
map V push :!nvim<space>$f
# Copiar al porta-papeles la ruta del archivo
map Y $printf "%s" "$fx" | xclip -selection clipboard
# Poder arrastar archivo gráficamente
map <c-z> $setsid -f dragon-drop -a -x $fx
# Imprimr tamaño de la Carpeta/s o archivo(s)
map P size
# Ejecutar comandos
map s shell
map q ${{
	printf '\033]0;\007'
	/usr/bin/lf -remote "send $id quit"
}}

cmd on-cd &{{
	# '&' commands run silently in background (which is what we want here),
	# but are not connected to stdout. To make sure our escape sequence
	# still reaches stdout we pipe it to /dev/tty
	printf "\033]0;$(pwd | sed "s|$HOME|~|")\007" >/dev/tty
}}

# Imprimir como título de ventana nuestro CWD
on-cd

# Comandos

cmd clean ${{
	clear
}}

cmd compress ${{
	whiptail --title "$(echo $f |sed 's#/[^/]*$##')" \
	--yesno "Comprimir todos los archivos:\n  Archivos de => $(echo $f |sed 's#/[^/]*$##')\n  En el archivo => /tmp/$(echo $PWD | sed 's/\//\_/g').*" 10 60 && \
	formato=$(whiptail --title "Formato" --menu "¿En que formato desea comprimirlos?" \
	15 60 3 "tar" ".tar.gz" "zip" ".zip" "7z" ".7z" 3>&1 1>&2 2>&3)
	case "$formato" in
	tar)
		tar -zcvf /tmp/$(date +'%H_%M_%S').tar.gz . >/dev/null && \
		whiptail --title "Operación Completada" \
		--msgbox "Archivo comprimido en: /tmp/$(date +'%H_%M_%S').tar.gz" 10 60 ;;
	zip)
		zip -r /tmp/$(date +'%H_%M_%S').zip . >/dev/null && \
		whiptail --title "Operación Completada" \
		--msgbox "Archivo comprimido en: /tmp/$(date +'%H_%M_%S').zip" 10 60 ;;
	7z)
		7z a /tmp/$(date +'%H_%M_%S').7z . >/dev/null && \
		whiptail --title "Operación Completada" \
		--msgbox "Archivo comprimido en: 7z a /tmp/$(date +'%H_%M_%S').7z" 10 60 ;;
	esac
}}

cmd size &{{
	dunstctl close-all
	notify-send -i system-file-manager \
	"El tamaño es de $(/usr/bin/du -chs $fx | grep total | awk {'print $1'})"
}}

cmd home :cd ~/

cmd bulk-rename ${{
	old="$(mktemp)"
	new="$(mktemp)"
	if [ -n "$fs" ]; then
		fs="$(basename $fs)"
	else
		fs="$(ls)"
	fi
	printf '%s\n' "$fs" >"$old"
	printf '%s\n' "$fs" >"$new"
	$EDITOR "$new"
	[ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
	paste "$old" "$new" | while IFS= read -r names; do
		src="$(printf '%s' "$names" | cut -f1)"
		dst="$(printf '%s' "$names" | cut -f2)"
		if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
			continue
		fi
		mv -- "$src" "$dst"
	done
	rm -- "$old" "$new"
	/usr/bin/lf -remote "send $id unselect"
}}

cmd fzf_search ${{
	RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
	res="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
		fzf --bind "change:reload:$RG_PREFIX {q} || true" \
		--ansi --layout=reverse --header 'Buscar en los archivos' \
		| cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
	)"
	[ -n "$res" ] && /usr/bin/lf -remote "send $id select \"$res\""
}}

cmd fzf_jump ${{
	res="$(find . -maxdepth 1 | fzf --reverse --header='Ir a la localización')"
	if [ -n "$res" ]; then
		if [ -d "$res" ]; then
			cmd="cd"
		else
			cmd="select"
		fi
		res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
		/usr/bin/lf -remote "send $id $cmd \"$res\""
	fi
}}

cmd open ${{
    case $(xdg-mime query filetype "$(readlink -f $f)") in

	*/x-7z-compressed | */vnd.rar | */x-tar | */x-compressed-tar )
		xarchiver "$fx" ;;

	*/zip | */vnd.comicbook+zip)
		case "$(readlink -f $f)" in
			*.cbz)
				zathura "$fx" ;;
			*)
			xarchiver "$fx" ;;
		esac ;;

	*/vnd.*document*)
		libreoffice "$fx" ;;

	*/pdf | */epub*)
		zathura "$f" ;;

	text/* | */xml | */json | inode/x-empty | */x-shellscript | */pgp-encrypted | */x-xcursor | */x-theme | */x-desktop )
		$EDITOR $fx ;;

	image/*)
		$HOME/.local/bin/rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\|svg\)\(_large\)*$" |
		nsxiv -aio | while read -r file; do
			[ -z "$file" ] && continue
			/usr/bin/lf -remote "send select \"$file\""
			/usr/bin/lf -remote "send toggle"
		done &
		;;

	audio/*)
		/usr/bin/mpv --audio-display=no "$f" ;;

	video/*)
		/usr/bin/vlc "$f" ;;

	*/x-keepass2)
		keepassxc "$f" ;;

	*/x-reaper-*)
		reaper "$f" ;;

	*/x-tuxguitar | application/gpx+xml | application/x-gnuplot | application/x-gtp)
		tuxguitar-bin "$fx" ;;

        *) for f in $fx; do setsid -f $OPENER "$f" 2>&1 && clear; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	whiptail --title "¿Extraer archivo(s)?" \
	--yesno "¿Quieres extraer el archivo $f?" 10 60 && \
	aunpack $f && \
	whiptail --title "Operación Completada" \
	--msgbox "Los archivos se extrajeron correctamente" 10 60
}}

cmd paste &{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	case "$mode" in
		copy)
			rsync -av --ignore-existing --progress -- "$@" . |
			stdbuf -i0 -o0 -e0 tr '\r' '\n' |
			while IFS= read -r line; do
				/usr/bin/lf -remote "send $id echo $line"
			done && notify-send -i copyq "Archivo(s) copiados." >/dev/null
			;;
		move) mv -n -- "$@" . && notify-send -i copyq "Archivo(s) movidos."
		;;
	esac
	rm ~/.local/share/lf/files
	/usr/bin/lf -remote "send clear"
}}

cmd delete ${{
	clear; tput bold
	set -f
	printf "%s\n\n" "$fx"
	printf "¿Borrar archivo(s)? [s/N] "
	read ans
	[ $ans = "s" ] && rm -rf -- $fx && \
	notify-send -i \
	/usr/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
	"Archivo(s) borrado(s)"
}}

cmd trash ${{
	clear; tput bold
	set -f
	printf "%s\n\n" "$fx"
	printf "¿Mover archivo(s) a la papelera? [s/N] "
	read ans
	[ $ans = "s" ] && trash-put $fx &&
	notify-send -i \
	/usr/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
	"Archivo(s) movido(s) a la papelera"
}}

cmd clean-trash ${{
	clear; tput bold
	set -f
	printf "Contenidos de la papelera:\n"
	trash-list
	printf "¿Vaciar papelera? [s/N] "
	read ans
	[ $ans = "s" ] && trash-empty -f && \
	notify-send -i \
	/usr/share/icons/Papirus-Dark/128x128/places/user-trash.svg \
	"Archivo(s) borrados"
}}

cmd restore-trash ${{
	clear; tput bold
	set -f
	printf "Contenidos de la papelera:\n"
	trash-list
	printf "¿Restaurar papelera? [s/N] "
	read ans
	[ $ans = "s" ] && trash-restore && printf "done"
}}
