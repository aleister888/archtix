#!/bin/bash
# shellcheck disable=SC2155

# Parámetros del script
INPUT_DIR=${1:-$(pwd)}     # Diretorio que contiene los datos
DATA_DIR="$INPUT_DIR/data" # Directorio del que extraeremos los datos
MAX_DIR="$INPUT_DIR/max"

# Función para procesar cada archivo CSV
process_csv() {
	local -r FILE="$1"                                                   # Archivo a procesar
	local -r EXERCISE_NAME=$(basename "$FILE" .csv)                      # Extraemos el nombre del ejercicio
	local -r DIR_NAME=$(dirname "$FILE")                                 # Directorio que contiene el archivo
	local -r MUSCLE_GROUP=$(basename "$DIR_NAME")                        # Grupo muscular del ejercicio
	local -r MAX_FILE="$MAX_DIR/$MUSCLE_GROUP/$EXERCISE_NAME".csv        # Archivo donde se guardará el peso máximo levantado por sesión
	local -r PLOT_FILE="$MAX_DIR/$MUSCLE_GROUP/plots/$EXERCISE_NAME".png # Archivo donde se guardará el peso máximo levantado por sesión
	local -r PLOT_NAME="$(echo "$EXERCISE_NAME" | sed 's/_/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')"

	mkdir -p "$(dirname "$MAX_FILE")"
	mkdir -p "$(dirname "$PLOT_FILE")"

	# Guardamos todas las filas del archivo en un array
	[[ ! -s "$FILE" ]] && return
	mapfile -t ALL_ROWS < <(awk -F, 'NR > 1 {print $0}' "$FILE")

	# Función para obtener los máximos
	get_maxs() {
		declare -A MAX_DATA # Array para almacenar el máximo por fecha

		for ROW in "${ALL_ROWS[@]}"; do
			IFS=',' read -r DATE W R S N <<<"$ROW"

			# Comparar los valores con bc para manejar decimales
			if [[ ! "${MAX_DATA[$DATE]}" ]]; then
				# Si aún no hay un valor, guardamos este
				[ -n "$R" ] && MAX_DATA[$DATE]="$W,$R,$S,$N"
			else
				# Si el valor actual es mayor que el anterior, lo actualizamos
				# Usamos bc para manejar decimales en la comparación
				MAX_WEIGHT=$(echo "${MAX_DATA[$DATE]}" | cut -d',' -f1)
				MAX_REPS=$(echo "${MAX_DATA[$DATE]}" | cut -d',' -f2)

				# Comparar el peso
				MAX_DIFF=$(echo "$W > $MAX_WEIGHT" | bc)
				if [[ "$MAX_DIFF" -eq 1 ]]; then
					MAX_DATA[$DATE]="$W,$R,$S,$N"
				elif [[ "$W" == "$MAX_WEIGHT" ]]; then
					# Si los pesos son iguales, comparamos las repeticiones
					REPS_DIFF=$(echo "$R > $MAX_REPS" | bc)
					if [[ "$REPS_DIFF" -eq 1 ]]; then
						MAX_DATA[$DATE]="$W,$R,$S,$N"
					fi
				fi
			fi
		done

		# Guardar los máximos en el archivo correspondiente
		echo "fecha_Y-m-d,peso_maximo_kg,reps_maximas,status,notes" >"$MAX_FILE"
		for DATE in $(echo "${!MAX_DATA[@]}" | tr ' ' '\n' | sort); do
			echo "$DATE,${MAX_DATA[$DATE]}" >>"$MAX_FILE"
		done
	}
	# Graficar el progreso del peso máximo, junto con el producto
	# peso*repeticiones y el RM estimado con Brzycki
	plot_maxs() {
		cat <<-EOF | gnuplot
			set datafile separator ","
			set terminal pngcairo size 1600,1200 enhanced font 'Verdana,16'
			set output '$PLOT_FILE'
			set title "$PLOT_NAME"
			set xlabel "Fecha"
			set ylabel "Peso (kg)"
			set y2label "Producto (Peso * Reps)"
			set xdata time
			set timefmt "%Y-%m-%d"
			set format x "%Y-%m-%d"
			set grid
			set y2tics
			set logscale y2
			set xtics rotate by -20

			plot '$MAX_FILE' using 1:2 with linespoints lw 2 title "Peso Máximo" axes x1y1, \
			     '' using 1:(\$2 * \$3) with linespoints title "Peso * Reps" axes x1y2, \
			     '' using 1:(\$2 / (1.0278 - (0.0278 * \$3))) with lines dt 2 lw 2 title "RM Estimado (Brzycki)" axes x1y1, \
			     '' using 1:(\$2 * (1 + \$3 / 30)) with lines dt 2 lw 2 title "RM Estimado (Epley)" axes x1y1, \
			     '' using 1:2:3 with labels offset 0,1 notitle axes x1y1
		EOF
	}

	# Llamar a las subfunciones
	get_maxs
	plot_maxs
}

# Verificar si el directorio objetivo existe
if [[ ! -d "$DATA_DIR" ]]; then
	echo "Error: El directorio '$DATA_DIR' no existe."
	exit 1
fi

# Recorremos todos los archivos CSV en el directorio objetivo y sus subdirectorios, excluyendo los directorios max y last
find "$DATA_DIR" -type d -path "$MAX_DIR" -prune -o -type f -name "*.csv" -print | while read -r FILE; do
	process_csv "$FILE"
done

echo "Procesamiento completado."
