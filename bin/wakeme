#!/bin/bash

# Script de alarma

export LC_TIME=en_US.UTF-8
export DISPLAY=:0
export XDG_RUNTIME_DIR=/run/user/$(id -u)

DAY=$(date +%A)

if [ "$DAY" == "Saturday" ] || [ "$DAY" == "Sunday" ]; then
	echo "It's $DAY, time to rest! Exiting the script."
	exit 0
fi

ALARMA="$1"

# Imprime todos los dispositivos de salida
getout(){
pactl list sources | grep -oE 'Source #([0-9]+)|Name: [^\n]+.*' | \
	awk '{printf "%s ", $2; if (NR % 2 == 0) printf "\n"}' | \
	sed 's/Name: //' | sed 's/^.//' | grep output
}

# Función para hacer sonar la alarma hasta que la apage
# Vamos a guardar el volúmen que tenia el dispostivo de audio, para poner la
# alarma con un volumen alto y luego restaurar el nivel de volumen previo
wakeme(){
	# Guardamos el volumen original y ponemos el volumen al 70%
	local VOL="$(pamixer --get-volume)"
	pactl set-sink-volume @DEFAULT_SINK@ 70%
	# Hacer sonar alarma
	ffplay -nodisp -autoexit "$ALARMA" &

	# Esperar a que cierre este menu para cerrar el proceso que esta
	# haciendo sonar la alarma
	yad --title "Cerrar Alarma" --button="Apagar Alarma"

	# Una vez que el usuario interactúa con el menú se detiene la
	# reproducción de la alarma
	pkill ffplay
	pactl set-sink-volume @DEFAULT_SINK@ "$VOL"%
}

SPEAKERS="$(getout | awk '/output\.pci/ && /analog-stereo/ {print $1}')"
OG_SINK="$(pactl get-default-sink)"

# Si el dispositivo de audio no son los altavoces, cambiar a estos antes de
# reproducir la alarma
if [ "$(pactl get-default-sink)" != "$SPEAKERS" ]; then
	# Cambiamos a altavoces
	pactl set-default-sink "$SPEAKERS"
	# Hacer sonar la alarma
	wakeme
	pactl set-default-sink "$OG_SINK"
else
	wakeme
fi
